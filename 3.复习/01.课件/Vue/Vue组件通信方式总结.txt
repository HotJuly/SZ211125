1.props
	使用场景:父子组件通信

	父传子
		流程:
			1.父组件给子组件的标签身上添加标签属性
			2.子组件通过在配置对象中添加props配置项,来声明当前组件需要接收的标签属性
			3.子组件接收之后,就可以通过this直接访问得到的props数据

		小总结:父传子,是父组件将需要传递的数据传给子组件

	子传父
		流程:
			1.父组件给子组件的标签身上添加标签属性,属性值是父组件的methods中的方法
				methods中的方法的this,一定是当前组件实例对象(在该案例中就是父组件)

			2.子组件通过在配置对象中添加props配置项,来声明当前组件需要接收的标签属性
			3.子组件调用父组件传递下来的函数,并向内部传入数据
			4.在该函数内部,由于this是父组件的实例对象,所以可以直接修改父组件的状态数据

		小总结:子传父,是父组件将接收数据的函数传给子组件


2.provide/inject
	使用场景:祖孙组件通信
	
	流程:
		1.祖先组件在自己的配置对象中添加配置属性provide,并将需要暴露的数据写在内部
			provide值的数据类型是对象

		2.后代组件在自己的配置对象中添加配置属性inject,将需要接收的数据名写在内部
			inject值的数据类型是数组
	注意点:
		1.如果同时存在多个provide的情况下,inject查找数据的顺序类似于作用域,从内向外找
		2.provide 和 inject 绑定并不是可响应的
			如果需要响应式,就需要自己实现
				可以通过Vue.observable对需要暴露的数据进行响应式的处理

3.自定义事件

	v-model指令(双向数据绑定)
		用法:
			1.对input框使用
				1.将v-model的结果作为默认值在input框中进行展示(属性名:value)
    					<input type="text" :value="num">
				2.当input框中的数据发生变化的时候,会同步修改data中对应的状态数据(事件名:input事件)
    					<input type="text" :value="num" @input="changeNum">

			2.对组件使用
				1.给子组件添加标签属性,属性名默认是value
    					<HelloWorld :value="msg"/> 
				2.给子组件绑定了自定义事件,用于接收子组件传递回来的数据,事件名默认是input
    					<HelloWorld :value="msg" @input="changeMsg123"/>

			扩展:
				1.model配置属性可以自定义,父组件传下来的属性名和自定义事件名
			


			





