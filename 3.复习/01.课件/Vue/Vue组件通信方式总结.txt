1.props
	使用场景:父子组件通信

	父传子
		流程:
			1.父组件给子组件的标签身上添加标签属性
			2.子组件通过在配置对象中添加props配置项,来声明当前组件需要接收的标签属性
			3.子组件接收之后,就可以通过this直接访问得到的props数据

		小总结:父传子,是父组件将需要传递的数据传给子组件

	子传父
		流程:
			1.父组件给子组件的标签身上添加标签属性,属性值是父组件的methods中的方法
				methods中的方法的this,一定是当前组件实例对象(在该案例中就是父组件)

			2.子组件通过在配置对象中添加props配置项,来声明当前组件需要接收的标签属性
			3.子组件调用父组件传递下来的函数,并向内部传入数据
			4.在该函数内部,由于this是父组件的实例对象,所以可以直接修改父组件的状态数据

		小总结:子传父,是父组件将接收数据的函数传给子组件


2.provide/inject
	使用场景:祖孙组件通信
	
	流程:
		1.祖先组件在自己的配置对象中添加配置属性provide,并将需要暴露的数据写在内部
			provide值的数据类型是对象

		2.后代组件在自己的配置对象中添加配置属性inject,将需要接收的数据名写在内部
			inject值的数据类型是数组
	注意点:
		1.如果同时存在多个provide的情况下,inject查找数据的顺序类似于作用域,从内向外找
		2.provide 和 inject 绑定并不是可响应的
			如果需要响应式,就需要自己实现
				可以通过Vue.observable对需要暴露的数据进行响应式的处理

3.自定义事件

	$on	->	给某一个组件实例绑定自定义事件(触发无限次)
	$once	->	给某一个组件实例绑定自定义事件(只能触发1次)	
	$off	->	用于解绑自定义事件
				有三种使用方式:
					1.传入了事件名和回调函数(	this.$off('a',fn1)	)
						只解绑当前组件实例对象身上a类自定义事件中,回调函数是fn1的这一个

					2.传入了事件名(	this.$off('a')	)
						只解绑当前组件实例对象身上a类自定义事件中所有的回调函数

					3.传入了事件名(	this.$off()	)
						解绑当前组件实例对象身上所有类型的回调函数

	$emit	->	调用组件实例身上的某类自定义事件,并给回调函数传入实参

	v-model指令(双向数据绑定)
		用法:
			1.对input框使用
				1.将v-model的结果作为默认值在input框中进行展示(属性名:value)
    					<input type="text" :value="num">
				2.当input框中的数据发生变化的时候,会同步修改data中对应的状态数据(事件名:input事件)
    					<input type="text" :value="num" @input="changeNum">

			2.对组件使用
				1.给子组件添加标签属性,属性名默认是value
    					<HelloWorld :value="msg"/> 
				2.给子组件绑定了自定义事件,用于接收子组件传递回来的数据,事件名默认是input
    					<HelloWorld :value="msg" @input="changeMsg123"/>

			扩展:
				1.model配置属性可以自定义,父组件传下来的属性名和自定义事件名

	.sync修饰符
		用法:
			1.给子组件添加标签属性,属性名自定义
    				<HelloWorld :msg="msg"/> 

			2.给子组件绑定了自定义事件,用于接收子组件传递回来的数据,事件名是update:msg
				格式:update: + "属性名"
    				<HelloWorld :msg="msg" @update:msg="changeMsg123"/>

	扩展:Vue3中v-model和.sync二合一了,语法使用的还是v-model,但是实际效果是.sync的效果


	全局事件总线
		操作:
			1.订阅
			2.发布
			3.取消订阅(解绑)

		角色:
			1.订阅者
			2.发布者

		约束:
			1.必须先订阅再发布
			2.订阅者和发布者必须同时存在

		流程:
			1.在Vue的原型对象身上创建一个$bus属性,属性值是Vue的实例对象
				Vue.prototype.$bus = new Vue();
				注意点:
					1.$bus这个名字是可以随意定义的
					2.$bus必须是一个Vue的实例对象

			2.在需要接收数据的组件中,给$bus对象绑定自定义事件,并提供回调函数用于接收数据
    				this.$bus.$on('sendMsg',(data)=>{
      					console.log('APP',data);
    				})
			
			3.在需要发送数据的组件中,使用$emit语法,触发$bus身上的自定义事件,并提供数据
      				this.$bus.$emit('sendMsg',123)

			4.在使用完自定义事件或者组件卸载的时候,记得解绑全局事件总线上的自定义事件
				在后台管理系统中,特别要注意闭包,自定义事件等会导致内存泄漏操作的使用,及时释放
		

4.找到对应组件实例对象
	$parent->找到当前组件的父组件实例对象

	$root->找到当前组件树中的根组件实例对象(其实就是main.js中的root组件)

	$children->找到当前组件的子组件实例对象组成的数组
		注意点:
			1.该数组中的排列顺序,不代表页面上的显示顺序
			2.操作该数组没有响应式的效果,他不会影响到页面上的显示顺序

	$refs->找到指定元素
		1.对原生标签使用
			this.$refs最终可以得到该标签的真实DOM
		2.对组件标签使用
			this.$refs最终可以得到该组件的实例对象

5.$attrs,$listener
	$attrs->会收集到当前组件没有被props接收的剩余标签属性
	$listener->会收集当前组件自身所有的自定义事件,事件名作为属性名,事件的回调函数作为属性值进行报错
			













			


			





